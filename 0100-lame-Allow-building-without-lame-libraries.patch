From cfa737c73d5a2eb365b3d472582eea224c1c20cf Mon Sep 17 00:00:00 2001
From: Colin Guthrie <colin@mageia.org>
Date: Thu, 3 Mar 2011 16:21:26 +0000
Subject: [PATCH 100/105] lame: Allow building without lame libraries.

---
 mythtv/configure                                   |  8 ++----
 mythtv/libs/libmythtv/libmythtv.pro                |  7 ++++-
 .../libmythtv/recorders/NuppelVideoRecorder.cpp    | 32 ++++++++++++++++++++--
 .../libs/libmythtv/recorders/NuppelVideoRecorder.h |  5 ++++
 mythtv/libs/libmythtv/recordingprofile.cpp         | 16 ++++++++++-
 5 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/mythtv/configure b/mythtv/configure
index 4aa8727..8551480 100755
--- a/mythtv/configure
+++ b/mythtv/configure
@@ -2620,7 +2620,7 @@ enable ceton
 enable hdpvr
 enable ivtv
 enable asi
-enable lamemp3
+disable libmp3lame
 enable libass
 enable libcec
 enable libcrypto
@@ -7249,10 +7249,6 @@
    fi
 fi
 
-# Check that all MythTV build "requirements" are met:
-enabled lamemp3 && check_lib2 lame/lame.h lame_init -lmp3lame -lm ||
-    die "ERROR! You must have the Lame MP3 encoding library installed to compile MythTV."
-
 enabled exiv2 && $(pkg-config --exists exiv2) ||
     die "ERROR! You must have the Exiv2 image tag reader library installed to compile MythTV."
 
@@ -6189,6 +6185,8 @@ enabled audio_oss         && append CCONFIG "using_oss"
 enabled audio_pulse       && append CCONFIG "using_pulse"
 enabled audio_pulseoutput && append CCONFIG "using_pulseoutput"
 
+enabled libmp3lame        && append CCONFIG "using_lame"
+
 if enabled darwin_da; then
   append CCONFIG "darwin_da"
   echo "SLIB_UNINSTALL_EXTRA_CMD=${SLIB_UNINSTALL_EXTRA_CMD}" >> $TMPMAK
diff --git a/mythtv/libs/libmythtv/libmythtv.pro b/mythtv/libs/libmythtv/libmythtv.pro
index c74cbce..25ed783 100644
--- a/mythtv/libs/libmythtv/libmythtv.pro
+++ b/mythtv/libs/libmythtv/libmythtv.pro
@@ -756,6 +756,12 @@ using_backend {
         DEFINES += USING_ASI
     }
 
+    # LAME MP3 Compression enabled
+    using_lame {
+        DEFINES += LAME
+        LIBS += -lmp3lame
+    }
+
     DEFINES += USING_BACKEND
 }
 
@@ -798,7 +804,6 @@ LIBS += -lmythservicecontracts-$$LIBVERSION
 using_mheg: LIBS += -L../libmythfreemheg -lmythfreemheg-$$LIBVERSION
 using_live: LIBS += -L../libmythlivemedia -lmythlivemedia-$$LIBVERSION
 using_hdhomerun: LIBS += -L../../external/libhdhomerun -lmythhdhomerun-$$LIBVERSION
-using_backend: LIBS += -lmp3lame
 using_backend: LIBS += -L../../external/minilzo -lmythminilzo-$$LIBVERSION
 LIBS += $$EXTRA_LIBS $$QMAKE_LIBS_DYNLOAD
 
diff --git a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
index 681bf5d..9712ce0 100644
--- a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
+++ b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
@@ -94,7 +94,11 @@ NuppelVideoRecorder::NuppelVideoRecorder(TVRec *rec, ChannelBase *channel) :
     pid = pid2 = 0;
     inputchannel = 1;
     compression = 1;
+#ifdef LAME
     compressaudio = 1;
+#else
+    compressaudio = 0;
+#endif
     usebttv = 1;
     width  = 352;
     height = 240;
@@ -106,12 +110,14 @@ NuppelVideoRecorder::NuppelVideoRecorder(TVRec *rec, ChannelBase *channel) :
     framerate_multiplier = 1.0;
     height_multiplier = 1.0;
 
+#ifdef LAME
     mp3quality = 3;
     gf = NULL;
+    mp3buf = NULL;
+    mp3buf_size = 0;
+#endif
     rtjc = NULL;
     strm = NULL;
-    mp3buf = NULL;
-    mp3buf_size = 0;

     transcoding = false;

@@ -205,10 +211,12 @@ NuppelVideoRecorder::~NuppelVideoRecorder(void)
     }
     if (rtjc)
         delete rtjc;
+#ifdef LAME
     if (mp3buf)
         delete [] mp3buf;
     if (gf)
         lame_close(gf);
+#endif
     if (strm)
         delete [] strm;
     if (audio_device)
@@ -329,8 +337,10 @@ void NuppelVideoRecorder::SetOption(const QString &opt, int value)
         hmjpg_vdecimation = value;
     else if (opt == "audiocompression")
         compressaudio = value;
+#ifdef LAME
     else if (opt == "mp3quality")
         mp3quality = value;
+#endif
     else if (opt == "samplerate")
         audio_samplerate = value;
     else if (opt == "audioframesize")
@@ -430,13 +440,16 @@ void NuppelVideoRecorder::SetOptionsFromProfile(RecordingProfile *profile,
     if ((tmp = profile->byName("audiocodec")))
         setting = tmp->getValue();
 
+#ifdef LAME
     if (setting == "MP3")
     {
         SetOption("audiocompression", 1);
         SetIntOption(profile, "mp3quality");
         SetIntOption(profile, "samplerate");
     }
-    else if (setting == "Uncompressed")
+    else
+#endif
+         if (setting == "Uncompressed")
     {
         SetOption("audiocompression", 0);
         SetIntOption(profile, "samplerate");
@@ -753,7 +766,6 @@ void NuppelVideoRecorder::Initialize(void)
 int NuppelVideoRecorder::AudioInit(bool skipdevice)
 {
     int blocksize;
-    int tmp;
 
     if (!skipdevice)
     {
@@ -791,6 +803,8 @@ int NuppelVideoRecorder::AudioInit(bool skipdevice)
 
     if (compressaudio)
     {
+#ifdef LAME
+        int tmp;
         gf = lame_init();
         lame_set_bWriteVbrTag(gf, 0);
         lame_set_quality(gf, mp3quality);
@@ -811,9 +825,17 @@ int NuppelVideoRecorder::AudioInit(bool skipdevice)
                 "AudioInit(): lame support requires 16bit audio");
             compressaudio = false;
         }
+#else
+        LOG(VB_GENERAL, LOG_ERR, LOC +
+                "AudioInit(): support for LAME MP3 compression not enabled, disabling");
+        compressaudio = false;
+#endif
     }
+
+#ifdef LAME
     mp3buf_size = (int)(1.25 * 16384 + 7200);
     mp3buf = new char[mp3buf_size];
+#endif
 
     return 0;
 }
@@ -2165,6 +2187,7 @@ void NuppelVideoRecorder::WriteHeader(void)
         moredata.rtjpeg_chroma_filter = M2;
     }
 
+#ifdef LAME
     if (compressaudio)
     {
         moredata.audio_fourcc = FOURCC_LAME;
@@ -2172,6 +2195,7 @@ void NuppelVideoRecorder::WriteHeader(void)
         moredata.audio_quality = mp3quality;
     }
     else
+#endif
     {
         moredata.audio_fourcc = FOURCC_RAWA;
     }
@@ -3145,6 +3169,7 @@ void NuppelVideoRecorder::WriteAudio(unsigned char *buf, int fnum, int timecode)
         }
     }
 
+#ifdef LAME
     if (compressaudio)
     {
         char mp3gapless[7200];
@@ -3205,6 +3230,7 @@ void NuppelVideoRecorder::WriteAudio(unsigned char *buf, int fnum, int timecode)
         audiobytes += audio_buffer_size;
     }
     else
+#endif
     {
         frameheader.comptype = '0'; // uncompressed audio
         frameheader.packetlength = audio_buffer_size;
diff --git a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
index 2b8ff1c..9aaae05 100644
--- a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
+++ b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
@@ -6,6 +6,8 @@
 
 #include <sys/time.h>
 #include <time.h>
+
+#ifdef LAME
 #ifdef MMX
 #undef MMX
 #define MMXBLAH
@@ -14,6 +16,7 @@
 #ifdef MMXBLAH
 #define MMX
 #endif
+#endif
 
 #include "mythconfig.h"
 
@@ -182,10 +185,12 @@ class MTV_PUBLIC NuppelVideoRecorder : public V4LRecorder, public CC608Input
 
     bool transcoding;
 
+#ifdef LAME
     int mp3quality;
     char *mp3buf;
     int mp3buf_size;
     lame_global_flags *gf;
+#endif
 
     RTjpeg *rtjc;
 
diff --git a/mythtv/libs/libmythtv/recordingprofile.cpp b/mythtv/libs/libmythtv/recordingprofile.cpp
index 71ed05a..042a7e0 100644
--- a/mythtv/libs/libmythtv/recordingprofile.cpp
+++ b/mythtv/libs/libmythtv/recordingprofile.cpp
@@ -79,6 +79,7 @@ class AudioCodecName: public ComboBoxSetting, public RecordingProfileStorage
     }
 };
 
+#ifdef LAME
 class MP3Quality : public SliderSetting, public CodecParamStorage
 {
   public:
@@ -93,6 +94,7 @@ class MP3Quality : public SliderSetting, public CodecParamStorage
                     "numbers) requires more CPU."));
     };
 };
+#endif
 
 class BTTVVolume : public SliderSetting, public CodecParamStorage
 {
@@ -402,12 +404,16 @@ class AudioCompressionSettings : public TriggeredConfigurationGroup
         addChild(m_codecName);
         setTrigger(m_codecName);
 
-        ConfigurationGroup* params = new VerticalConfigurationGroup(false);
+        ConfigurationGroup* params;
+
+#ifdef LAME
+        params = new VerticalConfigurationGroup(false);
         params->setLabel("MP3");
         params->addChild(new SampleRate(m_parent));
         params->addChild(new MP3Quality(m_parent));
         params->addChild(new BTTVVolume(m_parent));
         addTarget("MP3", params);
+#endif
 
         params = new VerticalConfigurationGroup(false, false, true, true);
         params->setLabel("MPEG-2 Hardware Encoder");
@@ -448,13 +454,17 @@ class AudioCompressionSettings : public TriggeredConfigurationGroup
             else
             {
                 // V4L, TRANSCODE (and any undefined types)
+#ifdef LAME
                 m_codecName->addSelection("MP3");
+#endif
                 m_codecName->addSelection("Uncompressed");
             }
         }
         else
         {
+#ifdef LAME
             m_codecName->addSelection("MP3");
+#endif
             m_codecName->addSelection("Uncompressed");
             m_codecName->addSelection("MPEG-2 Hardware Encoder");
         }
@@ -1489,7 +1499,11 @@ void RecordingProfileEditor::open(int id)
                 "(:NAME, :VIDEOCODEC, :AUDIOCODEC, :PROFILEGROUP);");
         query.bindValue(":NAME", profName);
         query.bindValue(":VIDEOCODEC", "MPEG-4");
+#ifdef LAME
         query.bindValue(":AUDIOCODEC", "MP3");
+#else
+        query.bindValue(":AUDIOCODEC", "Uncompressed");
+#endif
         query.bindValue(":PROFILEGROUP", group);
         if (!query.exec())
         {
-- 
1.8.4

